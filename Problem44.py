# Code by amotef@gmail.com

# projecteuler.net
# https://projecteuler.net/problem=44

# Pentagon numbers
# Problem 44

# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
# The first ten pentagonal numbers are:

#     1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
# However, their difference, 70 − 22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their
# sum and difference are pentagonal and D = |Pk − Pj| is minimised;
# what is the value of D?


# Solution 1

# When the problem asks for D = |Pk − Pj| to be minimized it simply
# means the numerically closest pair which, by our method,
# is the first occurrence found.

# We search by sum and difference instead of by Pj and Pk and this 
# caused some confusion. This was the best we we could think of to 
# minimize D without having to force comparisons.

# The variable names have been changed to make this more clear:
# s is the sum Pk + Pj
# Pj is, well, Pj
# s-Pj is Pk
# D is s-2*Pj which is simplified from (s-Pj)-Pj


# Solution 1

import time
start_time = time.time()   #Time at the start of program execution

def value_of_D():
    ps = set()
    i = 1000
    while True:
        i += 1
        s = (3*i*i - i) // 2
        for Pj in ps:
            if s-Pj in ps and s-2*Pj in ps: 
                return s-2*Pj
        ps.add(s)

print ("the value of D =", value_of_D())

end_time = time.time()   #Time at the end of execution
print ("Time of program execution:", (end_time - start_time))   # Time of program execution



# Solution 2

# Pentagon numbers (best papers):
# http://www.fq.math.ca/Scanned/8-1/hansen.pdf
# http://pages.uoregon.edu/koch/PentagonalNumbers.pdf
# http://mathworld.wolfram.com/PentagonalNumber.html

# The formula to check if the given number 'n' is pentagonal number or not is:
# (1+(24n+1)1/2)/6 is an integer or not.


# import time
# start_time = time.time()   #Time at the start of program execution


# def is_pentagonal(n):   # check if the number is pentagonal number or not
#     if (1+(24*n+1)**0.5) % 6 == 0:
#         return True
#     return False

# flag = True   # check if the number is found or not

# i = 1   # loop iterator

# while flag:
#     for j in range(1, i):
#         a = i*(3*i-1)/2
#         b = j*(3*j-1)/2
#         if is_pentagonal(a+b) and is_pentagonal(a-b):
#             print (a-b)
#             flag = False
#             break
#     i += 1

# end_time = time.time()   #Time at the end of execution
# print ("Time of program execution:", (end_time - start_time))   # Time of program execution



### Answer:  5482660
